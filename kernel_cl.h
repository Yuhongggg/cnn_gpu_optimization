const char *kernel_cl =
"#define NUM 256\n"
"#define INIMROW 228\n"
"#define IMROW 224\n"
"#define OUTIMROW 112\n"
"#define KERNEL 5\n"
"#define HBLKSZ 8\n"
"#define WBLKSZ 32\n"
"\n"
"__kernel \n"
"void get_bias(__global float C[NUM][IMROW][IMROW], \n"
"              __global float bias[NUM])\n"
"{\n"
"        int idx = get_global_id(0); \n"
"        int idy = get_global_id(1);\n"
"        int idz = get_global_id(2);\n"
"\n"
"        C[idx][idy][idz] = bias[idx];\n"
"}                       \n"
"\n"
"\n"
"__kernel\n"
"void convolution(__global float C[NUM][IMROW][IMROW],\n"
"                 __global float weight[NUM][NUM][KERNEL][KERNEL],\n"
"                 __global float Cin[NUM][INIMROW][INIMROW])\n"
"{\n"
"\n"
"        int i,j,w,p,q,h,jj;\n"
"        i = get_global_id(0);\n"
"        h = get_global_id(1);\n"
"        w = get_global_id(2);\n"
"       \n"
"        int i_l, h_l, w_l;\n"
"        i_l = get_local_id(0);\n"
"        h_l = get_local_id(1);\n"
"        w_l = get_local_id(2);\n"
"\n"
"\n"
"        __local float cin_buf[KERNEL+HBLKSZ][KERNEL+WBLKSZ];\n"
"	__local float weight_buf[KERNEL][KERNEL];\n"
"\n"
"	float cihw = C[i][h][w];\n"
"	\n"
" 	for(j = 0; j < NUM; j++){\n"
"\n"
"	    cin_buf[h_l][w_l] = Cin[j][h][w];\n"
"	    if(w_l > WBLKSZ-KERNEL){\n"
"	    	   cin_buf[h_l][w_l+4] = Cin[j][h][w+4];\n"
"       	    }\n"
"	    if(h_l > HBLKSZ-KERNEL){\n"
"	    	   cin_buf[h_l+4][w_l] = Cin[j][h+4][w];\n"
"	    }\n"
"	    if(w_l > WBLKSZ-KERNEL && h_l > HBLKSZ-KERNEL){\n"
"	    	   cin_buf[h_l+4][w_l+4] = Cin[j][h+4][w+4];\n"
"	    }\n"
"\n"
"	    if(w_l < KERNEL && h_l < KERNEL)\n"
"	    	   weight_buf[h_l][w_l] = weight[i][j][h_l][w_l];\n"
"\n"
"	    barrier( CLK_LOCAL_MEM_FENCE );\n"
"\n"
"            for(p = 0; p < KERNEL; p++){\n"
"                  for(q = 0; q < KERNEL; q++){\n"
"		  	cihw += weight_buf[p][q] * cin_buf[h_l+p][w_l+q];\n"
"                  }\n"
"            }\n"
"\n"
"	    barrier( CLK_LOCAL_MEM_FENCE );\n"
"	}\n"
"	\n"
"        C[i][h][w] = cihw;\n"
"\n"
"}                       \n"
"\n"
"\n"
"__kernel\n"
"void ReLU(__global float C[NUM][IMROW][IMROW])\n"
"{\n"
"        int idx = get_global_id(0);\n"
"        int idy = get_global_id(1);\n"
"        int idz = get_global_id(2);\n"
"\n"
"        C[idx][idy][idz] = 0 > C[idx][idy][idz] ? 0 : C[idx][idy][idz];\n"
"\n"
"}\n"
"\n"
"__kernel\n"
"void max_pooling(__global float C[NUM][IMROW][IMROW],\n"
"                __global float Cout[NUM][OUTIMROW][OUTIMROW])\n"
"{\n"
"        int i = get_global_id(0);\n"
"        int h = get_global_id(1);\n"
"        int w = get_global_id(2);\n"
"\n"
"        float local_max = C[i][h*2][w*2];\n"
"        local_max = local_max > C[i][h*2 + 1][w*2] ? local_max : C[i][h*2+1][w*2];\n"
"        local_max = local_max > C[i][h*2 + 1][w*2 + 1] ? local_max : C[i][h*2+1][w*2+1];\n"
"        local_max = local_max > C[i][h*2][w*2 + 1] ? local_max : C[i][h*2][w*2+1];\n"
"        Cout[i][h][w] = local_max;\n"
"\n"
"}                    \n"
;